import json
import math
import os
import random
import subprocess
import sys
import time
from pathlib import Path
from typing import List, Tuple
import cv2
import numpy as np
from prettytable import PrettyTable

JITTER_RADIUS_M = 2.0  # ÂÆö‰ΩçÊäñÂä®ÂçäÂæÑÔºàÁ±≥ÔºâÔºàÊ®°ÊãüÂÆö‰ΩçÂ§±ÁúüÔºâ
BASE_SPEED_MPS = 4.5  # Âπ≥ÂùáÈÄüÂ∫¶ÔºàÁ±≥/ÁßíÔºâ
SPEED_JITTER_RATIO = 0.20  # ÈÄüÂ∫¶Ê≥¢Âä® ¬±20%ÔºàÊ®°ÊãüÊ≠•È¢ëÔºâ
TICK_INTERVAL_SEC = 0.40  # ÂπøÊí≠Èó¥ÈöîÔºàÁßíÔºâ
DIST_LIMIT_M = 16000  # ÊÄªË∑ùÁ¶ªÈòàÂÄºÔºàÁ±≥Ôºâ‚Äú‚ÄùÊòØÁöÑÔºåÊàëÂ∏∏Âπ¥Èú∏Ê¶úÊ¶ú‰∏Ä‚Äú‚Äù

TAP_DELAY_SEC = 1.0  # ÊØèËΩÆÊ®°ÊãüÁÇπÂáªÈó¥Èöî
WINDOW_DELAY_SEC = 15.0  # Á≠âÂæÖÂ∫îÁî®ÊâìÂºÄÁöÑÊó∂Èó¥ÔºåÊÄßËÉΩÂ∑ÆËØ∑Ë∞ÉÂ§ß

WALK_PATH: List[Tuple[float, float]] = [
    (106.573302, 29.508911),
    (106.574330, 29.509245),
    (106.575602, 29.508467),
    (106.574259, 29.508012),
    (106.571092, 29.508342),
    (106.573513, 29.508640),
]  # ‰ªéÁôæÂ∫¶Âú∞Âõæ‰πãÁ±ªÁöÑÂ∑•ÂÖ∑ÂèñÁªèÁ∫¨Â∫¶Âä†ÂÖ•ÂàóË°®Âç≥ÂèØÔºåÈªòËÆ§‰∏∫ÂÖ∞Ëä±ËÉ°ÁöÑÂÆö‰ΩçÔºå‰ºöÂàóË°®Âæ™ÁéØ

CLR_A = "\x1b[01;38;5;117m"  # ÂçÉ‰∏ñÈªòËÆ§‰∏ªËâ≤Ë∞ÉÔºö‰∫ÆËìùÈùíÔºåÊ¥ªÊ≥ºÂÖÉÊ∞î ‚úß
CLR_P = "\x1b[01;38;5;153m"  # Ê∑°ÈùíÁ¥´ËìùÔºöËΩªÁõàÊ¢¶Âπª ‚úø
CLR_C = "\x1b[01;38;5;123m"  # ËΩØËìùÁªøË∞ÉÔºö‰∫≤ÂàáÊ∏©Êüî (ÔΩ°‚Ä¢ÃÄ·¥ó-)‚úß
HEART = "\x1b[01;38;5;195m"  # È´òÂÖâÁ≤âËìùÔºöÂº∫Ë∞ÉÊïàÊûúÁî®Ôºåbling bling‚ú®
CLR_RST = "\x1b[0m"  # ÈáçÁΩÆËâ≤ÂΩ©ÔΩû


def find_emu_dir() -> Path:
    cfg = Path("config.json")
    if cfg.exists():
        try:
            emu_dir = Path(json.loads(cfg.read_text(encoding="utf-8"))["emu_dir"])
            if emu_dir.joinpath("MuMuManager.exe").is_file():
                return emu_dir
        except Exception:
            pass
    search_roots = [
        Path(f"{d}:\\Program Files\\NetEase") for d in "CDEFGHIJKLMNOPQRSTUVWXYZ"
    ] + [
        Path(f"{d}:\\Program Files (x86)\\NetEase") for d in "CDEFGHIJKLMNOPQRSTUVWXYZ"
    ]
    for base in search_roots:
        for p in base.rglob("MuMuManager.exe"):
            emu_dir = p.parent
            cfg.write_text(json.dumps({"emu_dir": str(emu_dir)}), encoding="utf-8")
            return emu_dir
    sys.exit(f"{CLR_A}√ó ÂçÉ‰∏ñÊâæ‰∏çÂà∞MuMu‚Ä¶ËÄÅÂ∏à‰Ω†ÁúüÁöÑË£Ö‰∫ÜÂêóÔºü‚Ä¶{CLR_RST}")


def meter_to_deg(lat: float, dx: float, dy: float) -> Tuple[float, float]:
    d_lat = dy / 111_320
    d_lon = dx / (111_320 * math.cos(math.radians(lat)))
    return d_lat, d_lon


def set_location(mgr_path: Path, lon: float, lat: float) -> None:
    dx, dy = (random.uniform(-JITTER_RADIUS_M, JITTER_RADIUS_M) for _ in range(2))
    d_lat, d_lon = meter_to_deg(lat, dx, dy)
    subprocess.run(
        [
            str(mgr_path),
            "control",
            "-v",
            "0",
            "tool",
            "location",
            "-lon",
            f"{lon + d_lon:.6f}",
            "-lat",
            f"{lat + d_lat:.6f}",
        ],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )


def click_icon(
    adb: Path,
    icon_png: str,
    threshold: float = 0.75,
    offset: Tuple[int, int] = (0, 0),
    long_press: bool = False,
) -> bool:
    screen_png = Path("screen.png")
    with screen_png.open("wb") as fp:
        subprocess.run([str(adb), "exec-out", "screencap", "-p"], stdout=fp)
    screen = cv2.imread(str(screen_png))
    icon = cv2.imread(icon_png)
    if screen is None or icon is None:
        print(f"{CLR_A}√ó ÂõæÂÉèÂä†ËΩΩÂ§±Ë¥•‰∫ÜÂï¶ÔºÅ{CLR_RST}")
        return False
    res = cv2.matchTemplate(screen, icon, cv2.TM_CCOEFF_NORMED)
    _, score, _, loc = cv2.minMaxLoc(res)
    if score < threshold:
        # print(f"{HEART}‚Ä¶ Ê≤°ÊâæÂà∞ {icon_png} ÔΩûÔºàÁΩÆ‰ø°Â∫¶Âè™Êúâ {score:.3f} Âì¶Ôºâ{CLR_RST}")
        return False
    x, y = (
        loc[0] + icon.shape[1] // 2 + offset[0],
        loc[1] + icon.shape[0] // 2 + offset[1],
    )
    cmd = (
        ["swipe", str(x), str(y), str(x), str(y), "2000"]
        if long_press
        else ["tap", str(x), str(y)]
    )
    subprocess.run([str(adb), "shell", "input"] + cmd)
    print(
        f"{HEART}ü¶Ä Â∫îËØ•Â∞±ÊòØËøô‰∏™ÂêßÔºåÊàëË¶ÅÁÇπ‰∫ÜÂì¶~ {icon_png} @ ({x},{y}) ÔΩû ÁΩÆ‰ø°Â∫¶ {score:.3f}{CLR_RST}"
    )
    return True


def geo_dist_m(lat1, lon1, lat2, lon2) -> float:
    return math.hypot(lat2 - lat1, lon2 - lon1) * 111_320


def launch_emulator(emu_dir: Path) -> Tuple[Path, Path]:
    mgr = emu_dir / "MuMuManager.exe"
    player = emu_dir / "MuMuPlayer.exe"
    adb = emu_dir / "adb.exe"
    subprocess.Popen(player)
    print(f"{CLR_P}ü¶Ä MuMu Ê≠£Âú®ÂêØÂä®‰∫ÜÂï¶~{CLR_RST}")
    pkgs = {"com.tencent.mm", "com.tencent.wework"}
    while True:
        try:
            out = subprocess.check_output(
                [str(mgr), "control", "-v", "0", "app", "info", "-i"], encoding="utf-8"
            )
            if pkgs.issubset(json.loads(out)):
                break
        except Exception:
            pass
        time.sleep(2)
    for p in pkgs:
        subprocess.Popen([str(mgr), "control", "-v", "0", "app", "launch", "-pkg", p])
        time.sleep(WINDOW_DELAY_SEC)
    adb_info = json.loads(
        subprocess.check_output([str(mgr), "info", "-v", "0"], encoding="utf-8")
    )
    adb_addr = f"{adb_info['adb_host_ip']}:{adb_info['adb_port']}"
    subprocess.run([str(adb), "connect", adb_addr], stdout=subprocess.DEVNULL)
    print(f"{CLR_C}ü¶Ä ËøûÊé•‰∏äÂï¶ ADBÔºö{adb_addr} ÔΩûÂçÉ‰∏ñÂáÜÂ§áÂ•Ω‰∫ÜÂì¶ÔΩû{CLR_RST}")
    subprocess.run(
        [
            str(adb),
            "shell",
            "monkey",
            "-p",
            "com.tencent.wework",
            "-c",
            "android.intent.category.LAUNCHER",
            "1",
        ]
    )
    return mgr, adb


def pre_run_ui(adb: Path, mgr_path: Path) -> None:
    while not click_icon(adb, "img/lepao.png"):
        click_icon(adb, "img/gongzuotai.png")
        click_icon(adb, "img/tiyv.png")
        time.sleep(TAP_DELAY_SEC)
    lon, lat = WALK_PATH[0]
    set_location(mgr_path, lon, lat)
    while not click_icon(adb, "img/zhenquelepao.png"):
        click_icon(adb, "img/lepao.png")
        click_icon(adb, "img/kaishilepao.png")
        click_icon(adb, "img/zhiyoupao.png")
        click_icon(adb, "img/kaishil.png", offset=(320, -1404))
        click_icon(adb, "img/chongxin.png")
        time.sleep(TAP_DELAY_SEC)
    time.sleep(4)


def simulate_walk(mgr_path: Path, route: List[Tuple[float, float]]) -> None:
    idx, seg_dist, total_dist = 0, 0.0, 0.0
    t_start = t_prev = time.perf_counter()
    next_tick = t_prev + TICK_INTERVAL_SEC
    frame = 0
    while True:
        now = time.perf_counter()
        if now < next_tick:
            time.sleep(next_tick - now)
            now = next_tick
        next_tick += TICK_INTERVAL_SEC
        dt = now - t_prev
        t_prev = now
        lon1, lat1 = route[idx]
        lon2, lat2 = route[(idx + 1) % len(route)]
        seg_len = geo_dist_m(lat1, lon1, lat2, lon2)
        speed = BASE_SPEED_MPS * random.uniform(
            1 - SPEED_JITTER_RATIO, 1 + SPEED_JITTER_RATIO
        )
        move = speed * dt
        seg_dist += move
        total_dist += move
        while seg_dist >= seg_len:
            seg_dist -= seg_len
            idx = (idx + 1) % len(route)
            lon1, lat1 = route[idx]
            lon2, lat2 = route[(idx + 1) % len(route)]
            seg_len = geo_dist_m(lat1, lon1, lat2, lon2)
        ratio = seg_dist / seg_len
        lon = lon1 + (lon2 - lon1) * ratio
        lat = lat1 + (lat2 - lat1) * ratio
        set_location(mgr_path, lon, lat)
        frame += 1
        elapsed = now - t_start
        tbl = PrettyTable(["Êó∂Èó¥", "Âç≥Êó∂ÈÄüÂ∫¶", "ÊÄªË∑ØÁ®ã", "ÂùáÈÄü", "Ê≠•È¢ë"])
        tbl.add_row(
            [
                f"{CLR_P}{elapsed:7.2f}{CLR_RST}s",
                f"{CLR_P}{speed:7.2f}{CLR_RST}m/s",
                f"{CLR_P}{total_dist:8.2f}{CLR_RST}m",
                f"{CLR_P}{total_dist/elapsed:7.2f}{CLR_RST}m/s",
                f"{CLR_P}{frame/elapsed:7.2f}{CLR_RST}Hz",
            ]
        )
        os.system("cls" if os.name == "nt" else "clear")
        print(f"{HEART}ü¶Ä ÂçÉ‰∏ñÂæàÂø´Â∞±Ë∑ëÂÆåÂï¶~")
        print(tbl)
        if total_dist >= DIST_LIMIT_M:
            print(f"{CLR_A}ü¶Ä ÂïäÂíßÔºüÂ∑≤ÁªèË∑ëÂ§üÂï¶ÔΩû ü¶Ä{CLR_RST}")
            break


def post_run_ui(adb: Path) -> None:
    seq = [
        ("img/jieshu.png", {"long_press": True}),
        ("img/jieshu2.png", {}),
        ("img/jieshu3.png", {}),
        ("img/diandian.png", {}),
        ("img/chongxin.png", {}),
    ]
    for icon, kw in seq:
        if click_icon(adb, icon, **kw):
            time.sleep(TAP_DELAY_SEC)


if __name__ == "__main__":
    emu_dir = find_emu_dir()
    mgr_path, adb_path = launch_emulator(emu_dir)
    pre_run_ui(adb_path, mgr_path)
    simulate_walk(mgr_path, WALK_PATH)
    post_run_ui(adb_path)
